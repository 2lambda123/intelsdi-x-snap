/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go.
// source: github.com/intelsdi-x/snap/grpc/common/common.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	github.com/intelsdi-x/snap/grpc/common/common.proto

It has these top-level messages:
	Time
	Empty
	SnapError
	Label
	Metric
	NamespaceElement
	SubscribedPlugin
	ConfigMap
	Plugin
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Time struct {
	Sec  int64 `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	Nsec int64 `protobuf:"varint,2,opt,name=nsec" json:"nsec,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SnapError struct {
	ErrorString string            `protobuf:"bytes,1,opt,name=error_string" json:"error_string,omitempty"`
	ErrorFields map[string]string `protobuf:"bytes,2,rep,name=error_fields" json:"error_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SnapError) Reset()                    { *m = SnapError{} }
func (m *SnapError) String() string            { return proto.CompactTextString(m) }
func (*SnapError) ProtoMessage()               {}
func (*SnapError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SnapError) GetErrorFields() map[string]string {
	if m != nil {
		return m.ErrorFields
	}
	return nil
}

type Label struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// core.Metric
type Metric struct {
	Namespace          []*NamespaceElement `protobuf:"bytes,1,rep,name=Namespace" json:"Namespace,omitempty"`
	Version            int64               `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	Config             *ConfigMap          `protobuf:"bytes,3,opt,name=Config" json:"Config,omitempty"`
	LastAdvertisedTime *Time               `protobuf:"bytes,4,opt,name=LastAdvertisedTime" json:"LastAdvertisedTime,omitempty"`
	Data               []byte              `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	DataType           string              `protobuf:"bytes,6,opt,name=DataType" json:"DataType,omitempty"`
	Tags               map[string]string   `protobuf:"bytes,9,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp          *Time               `protobuf:"bytes,10,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Metric) GetNamespace() []*NamespaceElement {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *Metric) GetConfig() *ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Metric) GetLastAdvertisedTime() *Time {
	if m != nil {
		return m.LastAdvertisedTime
	}
	return nil
}

func (m *Metric) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metric) GetTimestamp() *Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type NamespaceElement struct {
	Value       string `protobuf:"bytes,1,opt,name=Value" json:"Value,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *NamespaceElement) Reset()                    { *m = NamespaceElement{} }
func (m *NamespaceElement) String() string            { return proto.CompactTextString(m) }
func (*NamespaceElement) ProtoMessage()               {}
func (*NamespaceElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// core.SubscribedPlugin
type SubscribedPlugin struct {
	TypeName string     `protobuf:"bytes,1,opt,name=TypeName" json:"TypeName,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Version  int64      `protobuf:"varint,3,opt,name=Version" json:"Version,omitempty"`
	Config   *ConfigMap `protobuf:"bytes,4,opt,name=Config" json:"Config,omitempty"`
}

func (m *SubscribedPlugin) Reset()                    { *m = SubscribedPlugin{} }
func (m *SubscribedPlugin) String() string            { return proto.CompactTextString(m) }
func (*SubscribedPlugin) ProtoMessage()               {}
func (*SubscribedPlugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SubscribedPlugin) GetConfig() *ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

type ConfigMap struct {
	IntMap    map[string]int64  `protobuf:"bytes,1,rep,name=IntMap" json:"IntMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap map[string]string `protobuf:"bytes,2,rep,name=StringMap" json:"StringMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// double is float64
	FloatMap map[string]float64 `protobuf:"bytes,3,rep,name=FloatMap" json:"FloatMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap  map[string]bool    `protobuf:"bytes,4,rep,name=BoolMap" json:"BoolMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *ConfigMap) Reset()                    { *m = ConfigMap{} }
func (m *ConfigMap) String() string            { return proto.CompactTextString(m) }
func (*ConfigMap) ProtoMessage()               {}
func (*ConfigMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ConfigMap) GetIntMap() map[string]int64 {
	if m != nil {
		return m.IntMap
	}
	return nil
}

func (m *ConfigMap) GetStringMap() map[string]string {
	if m != nil {
		return m.StringMap
	}
	return nil
}

func (m *ConfigMap) GetFloatMap() map[string]float64 {
	if m != nil {
		return m.FloatMap
	}
	return nil
}

func (m *ConfigMap) GetBoolMap() map[string]bool {
	if m != nil {
		return m.BoolMap
	}
	return nil
}

// core.Plugin
type Plugin struct {
	TypeName string `protobuf:"bytes,1,opt,name=TypeName" json:"TypeName,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Version  int64  `protobuf:"varint,3,opt,name=Version" json:"Version,omitempty"`
}

func (m *Plugin) Reset()                    { *m = Plugin{} }
func (m *Plugin) String() string            { return proto.CompactTextString(m) }
func (*Plugin) ProtoMessage()               {}
func (*Plugin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Time)(nil), "common.Time")
	proto.RegisterType((*Empty)(nil), "common.Empty")
	proto.RegisterType((*SnapError)(nil), "common.SnapError")
	proto.RegisterType((*Label)(nil), "common.Label")
	proto.RegisterType((*Metric)(nil), "common.Metric")
	proto.RegisterType((*NamespaceElement)(nil), "common.NamespaceElement")
	proto.RegisterType((*SubscribedPlugin)(nil), "common.SubscribedPlugin")
	proto.RegisterType((*ConfigMap)(nil), "common.ConfigMap")
	proto.RegisterType((*Plugin)(nil), "common.Plugin")
}

var fileDescriptor0 = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x56, 0x96, 0x34, 0x6d, 0x4e, 0x0b, 0x2a, 0x16, 0x17, 0x51, 0x25, 0x60, 0xe4, 0x6a, 0x20,
	0x68, 0xc5, 0x26, 0x60, 0x6c, 0xd3, 0x24, 0x60, 0x9d, 0x84, 0xb4, 0x21, 0x94, 0x4d, 0xbb, 0x04,
	0xb9, 0x8d, 0x17, 0x2c, 0x12, 0x27, 0x8a, 0xdd, 0x69, 0x7d, 0x01, 0x78, 0x22, 0x9e, 0x8a, 0x97,
	0xc0, 0x3f, 0x71, 0x49, 0x57, 0x50, 0x35, 0x89, 0x9b, 0xf6, 0x9c, 0xef, 0x7c, 0xdf, 0xb1, 0xcf,
	0x8f, 0x03, 0x3b, 0x29, 0x15, 0x5f, 0x67, 0x93, 0xe1, 0xb4, 0xc8, 0x47, 0x94, 0x09, 0x92, 0xf1,
	0x84, 0x3e, 0xbf, 0x1e, 0x71, 0x86, 0xcb, 0x51, 0x5a, 0x95, 0xd3, 0x91, 0x0c, 0xe4, 0x05, 0xab,
	0xff, 0x86, 0x65, 0x55, 0x88, 0x02, 0xf9, 0xc6, 0x8b, 0x9e, 0x81, 0x77, 0x4e, 0x73, 0x82, 0xfa,
	0xe0, 0x72, 0x32, 0x0d, 0x9d, 0x4d, 0x67, 0xcb, 0x8d, 0x95, 0x89, 0x10, 0x78, 0x4c, 0x41, 0x1b,
	0x1a, 0xd2, 0x76, 0xd4, 0x86, 0xd6, 0x38, 0x2f, 0xc5, 0x3c, 0xfa, 0xe9, 0x40, 0x70, 0x26, 0x0f,
	0x18, 0x57, 0x55, 0x51, 0xa1, 0xc7, 0xd0, 0x23, 0xca, 0xf8, 0xc2, 0x45, 0x45, 0x59, 0xaa, 0xb3,
	0x04, 0x71, 0x57, 0x63, 0x67, 0x1a, 0x42, 0x63, 0x4b, 0xb9, 0xa4, 0x24, 0x4b, 0xb8, 0xcc, 0xea,
	0x6e, 0x75, 0xb7, 0xa3, 0x61, 0x7d, 0xa9, 0x45, 0xae, 0xa1, 0xfe, 0x3d, 0xd6, 0xa4, 0x31, 0x13,
	0xd5, 0xbc, 0x4e, 0x63, 0x90, 0xc1, 0x21, 0xf4, 0x6f, 0x12, 0xd4, 0xd5, 0xbf, 0x91, 0x79, 0x7d,
	0xa8, 0x32, 0xd1, 0x7d, 0x68, 0x5d, 0xe1, 0x6c, 0x46, 0xf4, 0xdd, 0x83, 0xd8, 0x38, 0x7b, 0x1b,
	0xbb, 0x4e, 0xf4, 0x02, 0x5a, 0x27, 0x78, 0x42, 0x32, 0x45, 0xa1, 0x2c, 0x21, 0xd7, 0x5a, 0xe6,
	0xc5, 0xc6, 0xd1, 0x35, 0xe3, 0xdc, 0xea, 0xb4, 0x1d, 0x7d, 0x77, 0xc1, 0x3f, 0x25, 0xb2, 0x8a,
	0x29, 0x7a, 0x05, 0xc1, 0x47, 0x09, 0xf1, 0x12, 0x4f, 0x89, 0x14, 0xaa, 0x0a, 0x42, 0x5b, 0xc1,
	0x22, 0x30, 0xce, 0x48, 0x4e, 0x98, 0x88, 0x03, 0x66, 0x11, 0x14, 0x42, 0xfb, 0x82, 0x54, 0x9c,
	0x16, 0xac, 0xee, 0x66, 0xfb, 0xca, 0xb8, 0xe8, 0x09, 0xf8, 0xef, 0x0b, 0x76, 0x49, 0xd3, 0xd0,
	0x95, 0x81, 0xee, 0xf6, 0x3d, 0x9b, 0xce, 0xa0, 0xa7, 0xb8, 0x8c, 0xe5, 0xa4, 0x94, 0x89, 0x0e,
	0x00, 0x9d, 0x60, 0x2e, 0xde, 0x26, 0x52, 0x2b, 0x28, 0x27, 0x89, 0x9a, 0x5b, 0xe8, 0x69, 0x59,
	0xcf, 0xca, 0x14, 0x16, 0xa3, 0x6c, 0x85, 0xa7, 0x2a, 0x3b, 0xc2, 0x02, 0x87, 0x2d, 0xc9, 0xef,
	0xc5, 0x5e, 0x22, 0x6d, 0x34, 0x80, 0x8e, 0xc2, 0xce, 0xe7, 0x25, 0x09, 0x7d, 0x5d, 0x71, 0x27,
	0xa9, 0x7d, 0xa4, 0xf6, 0x02, 0xa7, 0x3c, 0x0c, 0x96, 0xab, 0x34, 0x8d, 0x18, 0xaa, 0x90, 0x99,
	0x8e, 0x27, 0xa4, 0x89, 0x9e, 0x42, 0xa0, 0x4e, 0xe1, 0x02, 0xe7, 0x65, 0x08, 0x7f, 0xb9, 0x52,
	0x20, 0x6c, 0x78, 0xf0, 0x5a, 0x72, 0xad, 0xfc, 0x56, 0xb3, 0xfb, 0x0c, 0xfd, 0x9b, 0x4d, 0x56,
	0xec, 0x0b, 0xcd, 0x76, 0x1a, 0x6c, 0xb4, 0x09, 0xdd, 0x23, 0xc2, 0xa7, 0x15, 0x2d, 0x85, 0xed,
	0xb9, 0x5c, 0xc7, 0xe4, 0x0f, 0xa4, 0xda, 0xa1, 0x72, 0xe9, 0xae, 0xdb, 0x41, 0xff, 0x70, 0xa0,
	0x7f, 0x36, 0x9b, 0x28, 0xd2, 0x84, 0x24, 0x9f, 0xb2, 0x59, 0x4a, 0x99, 0xea, 0x91, 0xea, 0x87,
	0x26, 0x9b, 0x33, 0x3a, 0xa2, 0xf6, 0x17, 0x49, 0x1a, 0xdb, 0xd2, 0x1c, 0xb5, 0xfb, 0xaf, 0x51,
	0x7b, 0x6b, 0x46, 0x1d, 0xfd, 0x72, 0x21, 0x58, 0xa0, 0xe8, 0x25, 0xf8, 0x1f, 0x98, 0x90, 0x56,
	0xbd, 0x72, 0x0f, 0x56, 0x84, 0x43, 0x13, 0x37, 0x13, 0xf1, 0xa9, 0x76, 0xd0, 0xa1, 0x7c, 0xa1,
	0xfa, 0xed, 0x29, 0xa5, 0x79, 0x6e, 0x9b, 0xab, 0xca, 0x05, 0xc5, 0x88, 0x03, 0x6e, 0x7d, 0xb4,
	0x0f, 0x9d, 0xe3, 0xac, 0xc0, 0xfa, 0x60, 0x57, 0xcb, 0x1f, 0xad, 0xca, 0x2d, 0xc3, 0xa8, 0x3b,
	0x97, 0xb5, 0x8b, 0x76, 0xa1, 0xfd, 0xae, 0x28, 0x32, 0xa5, 0xf5, 0xb4, 0xf6, 0xe1, 0xaa, 0xb6,
	0x26, 0x18, 0x69, 0x7b, 0x62, 0xbc, 0xc1, 0x1b, 0xe8, 0x36, 0xaa, 0x59, 0xb7, 0x20, 0x6e, 0x63,
	0x41, 0x06, 0x07, 0x70, 0x77, 0xb9, 0x9c, 0xdb, 0xac, 0xd7, 0x60, 0x1f, 0xee, 0x2c, 0x55, 0xb3,
	0x4e, 0xec, 0x34, 0xc5, 0x7b, 0xd0, 0x6b, 0x96, 0xb3, 0x4e, 0xdb, 0x69, 0xee, 0x75, 0x0c, 0xfe,
	0xff, 0x5e, 0xb6, 0x89, 0xaf, 0xbf, 0xf2, 0x3b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xca,
	0xdb, 0x82, 0x1c, 0x06, 0x00, 0x00,
}
