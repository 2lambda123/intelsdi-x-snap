// Code generated by protoc-gen-go.
// source: scheduler/rpc/scheduler.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	scheduler/rpc/scheduler.proto

It has these top-level messages:
	CreateTaskArg
	CreateTaskOpts
	CreateTaskReply
	GetTaskArg
	GetTasksReply
	StartTaskArg
	StartTaskReply
	StopTaskArg
	StopTaskReply
	RemoveTaskArg
	EnableTaskArg
	WatchTaskArg
	Watch
	Metric
	Label
	Task
	SnapError
	Time
	Empty
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Watch_EventType int32

const (
	Watch_METRICS_COLLECTED Watch_EventType = 0
	Watch_TASK_STARTED      Watch_EventType = 1
	Watch_TASK_STOPPED      Watch_EventType = 2
	Watch_TASK_DISABLED     Watch_EventType = 3
	Watch_TASK_STREAM_OPEN  Watch_EventType = 4
	Watch_ERROR             Watch_EventType = 5
)

var Watch_EventType_name = map[int32]string{
	0: "METRICS_COLLECTED",
	1: "TASK_STARTED",
	2: "TASK_STOPPED",
	3: "TASK_DISABLED",
	4: "TASK_STREAM_OPEN",
	5: "ERROR",
}
var Watch_EventType_value = map[string]int32{
	"METRICS_COLLECTED": 0,
	"TASK_STARTED":      1,
	"TASK_STOPPED":      2,
	"TASK_DISABLED":     3,
	"TASK_STREAM_OPEN":  4,
	"ERROR":             5,
}

func (x Watch_EventType) String() string {
	return proto.EnumName(Watch_EventType_name, int32(x))
}
func (Watch_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

type CreateTaskArg struct {
	ScheduleJson []byte          `protobuf:"bytes,1,opt,name=schedule_json,proto3" json:"schedule_json,omitempty"`
	WmapJson     []byte          `protobuf:"bytes,2,opt,name=wmap_json,proto3" json:"wmap_json,omitempty"`
	Start        bool            `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	Opts         *CreateTaskOpts `protobuf:"bytes,4,opt,name=opts" json:"opts,omitempty"`
}

func (m *CreateTaskArg) Reset()                    { *m = CreateTaskArg{} }
func (m *CreateTaskArg) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskArg) ProtoMessage()               {}
func (*CreateTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateTaskArg) GetOpts() *CreateTaskOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

type CreateTaskOpts struct {
	TaskName   string `protobuf:"bytes,1,opt,name=task_name" json:"task_name,omitempty"`
	Deadline   string `protobuf:"bytes,2,opt,name=deadline" json:"deadline,omitempty"`
	StopOnFail uint64 `protobuf:"varint,3,opt,name=stop_on_fail" json:"stop_on_fail,omitempty"`
	TaskId     string `protobuf:"bytes,4,opt,name=task_id" json:"task_id,omitempty"`
}

func (m *CreateTaskOpts) Reset()                    { *m = CreateTaskOpts{} }
func (m *CreateTaskOpts) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskOpts) ProtoMessage()               {}
func (*CreateTaskOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateTaskReply struct {
	Task   *Task        `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	Errors []*SnapError `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *CreateTaskReply) Reset()                    { *m = CreateTaskReply{} }
func (m *CreateTaskReply) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskReply) ProtoMessage()               {}
func (*CreateTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateTaskReply) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *CreateTaskReply) GetErrors() []*SnapError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type GetTaskArg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetTaskArg) Reset()                    { *m = GetTaskArg{} }
func (m *GetTaskArg) String() string            { return proto.CompactTextString(m) }
func (*GetTaskArg) ProtoMessage()               {}
func (*GetTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetTasksReply struct {
	Tasks map[string]*Task `protobuf:"bytes,1,rep,name=Tasks" json:"Tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetTasksReply) Reset()                    { *m = GetTasksReply{} }
func (m *GetTasksReply) String() string            { return proto.CompactTextString(m) }
func (*GetTasksReply) ProtoMessage()               {}
func (*GetTasksReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetTasksReply) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type StartTaskArg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StartTaskArg) Reset()                    { *m = StartTaskArg{} }
func (m *StartTaskArg) String() string            { return proto.CompactTextString(m) }
func (*StartTaskArg) ProtoMessage()               {}
func (*StartTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StartTaskReply struct {
	Errors []*SnapError `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
}

func (m *StartTaskReply) Reset()                    { *m = StartTaskReply{} }
func (m *StartTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StartTaskReply) ProtoMessage()               {}
func (*StartTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartTaskReply) GetErrors() []*SnapError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type StopTaskArg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StopTaskArg) Reset()                    { *m = StopTaskArg{} }
func (m *StopTaskArg) String() string            { return proto.CompactTextString(m) }
func (*StopTaskArg) ProtoMessage()               {}
func (*StopTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StopTaskReply struct {
	Errors []*SnapError `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
}

func (m *StopTaskReply) Reset()                    { *m = StopTaskReply{} }
func (m *StopTaskReply) String() string            { return proto.CompactTextString(m) }
func (*StopTaskReply) ProtoMessage()               {}
func (*StopTaskReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StopTaskReply) GetErrors() []*SnapError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type RemoveTaskArg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveTaskArg) Reset()                    { *m = RemoveTaskArg{} }
func (m *RemoveTaskArg) String() string            { return proto.CompactTextString(m) }
func (*RemoveTaskArg) ProtoMessage()               {}
func (*RemoveTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type EnableTaskArg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *EnableTaskArg) Reset()                    { *m = EnableTaskArg{} }
func (m *EnableTaskArg) String() string            { return proto.CompactTextString(m) }
func (*EnableTaskArg) ProtoMessage()               {}
func (*EnableTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type WatchTaskArg struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *WatchTaskArg) Reset()                    { *m = WatchTaskArg{} }
func (m *WatchTaskArg) String() string            { return proto.CompactTextString(m) }
func (*WatchTaskArg) ProtoMessage()               {}
func (*WatchTaskArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Watch struct {
	EventType Watch_EventType `protobuf:"varint,1,opt,name=event_type,enum=rpc.Watch_EventType" json:"event_type,omitempty"`
	Message   string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Events    []*Metric       `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
}

func (m *Watch) Reset()                    { *m = Watch{} }
func (m *Watch) String() string            { return proto.CompactTextString(m) }
func (*Watch) ProtoMessage()               {}
func (*Watch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Watch) GetEvents() []*Metric {
	if m != nil {
		return m.Events
	}
	return nil
}

type Metric struct {
	Namespace []string          `protobuf:"bytes,1,rep,name=namespace" json:"namespace,omitempty"`
	Data      []byte            `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	DataType  string            `protobuf:"bytes,3,opt,name=data_type" json:"data_type,omitempty"`
	Version   uint64            `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	Source    string            `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	Labels    []*Label          `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty"`
	Tags      map[string]string `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp *Time             `protobuf:"bytes,8,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Metric) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Metric) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metric) GetTimestamp() *Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Label struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type Task struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TaskState   uint64 `protobuf:"varint,2,opt,name=task_state" json:"task_state,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Hit         uint64 `protobuf:"varint,4,opt,name=hit" json:"hit,omitempty"`
	Misses      uint64 `protobuf:"varint,5,opt,name=misses" json:"misses,omitempty"`
	Failed      uint64 `protobuf:"varint,6,opt,name=failed" json:"failed,omitempty"`
	LastFailure string `protobuf:"bytes,7,opt,name=last_failure" json:"last_failure,omitempty"`
	TimeLastRun *Time  `protobuf:"bytes,8,opt,name=time_last_run" json:"time_last_run,omitempty"`
	TimeCreated *Time  `protobuf:"bytes,9,opt,name=time_created" json:"time_created,omitempty"`
	Deadline    string `protobuf:"bytes,10,opt,name=deadline" json:"deadline,omitempty"`
	WmapJson    []byte `protobuf:"bytes,11,opt,name=wmap_json,proto3" json:"wmap_json,omitempty"`
	StopOnFail  uint64 `protobuf:"varint,12,opt,name=stop_on_fail" json:"stop_on_fail,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Task) GetTimeLastRun() *Time {
	if m != nil {
		return m.TimeLastRun
	}
	return nil
}

func (m *Task) GetTimeCreated() *Time {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

type SnapError struct {
	ErrorString string            `protobuf:"bytes,1,opt,name=error_string" json:"error_string,omitempty"`
	ErrorFields map[string]string `protobuf:"bytes,2,rep,name=error_fields" json:"error_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SnapError) Reset()                    { *m = SnapError{} }
func (m *SnapError) String() string            { return proto.CompactTextString(m) }
func (*SnapError) ProtoMessage()               {}
func (*SnapError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SnapError) GetErrorFields() map[string]string {
	if m != nil {
		return m.ErrorFields
	}
	return nil
}

type Time struct {
	Sec  int64 `protobuf:"varint,1,opt,name=sec" json:"sec,omitempty"`
	Nsec int64 `protobuf:"varint,2,opt,name=nsec" json:"nsec,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func init() {
	proto.RegisterType((*CreateTaskArg)(nil), "rpc.CreateTaskArg")
	proto.RegisterType((*CreateTaskOpts)(nil), "rpc.CreateTaskOpts")
	proto.RegisterType((*CreateTaskReply)(nil), "rpc.CreateTaskReply")
	proto.RegisterType((*GetTaskArg)(nil), "rpc.GetTaskArg")
	proto.RegisterType((*GetTasksReply)(nil), "rpc.GetTasksReply")
	proto.RegisterType((*StartTaskArg)(nil), "rpc.StartTaskArg")
	proto.RegisterType((*StartTaskReply)(nil), "rpc.StartTaskReply")
	proto.RegisterType((*StopTaskArg)(nil), "rpc.StopTaskArg")
	proto.RegisterType((*StopTaskReply)(nil), "rpc.StopTaskReply")
	proto.RegisterType((*RemoveTaskArg)(nil), "rpc.RemoveTaskArg")
	proto.RegisterType((*EnableTaskArg)(nil), "rpc.EnableTaskArg")
	proto.RegisterType((*WatchTaskArg)(nil), "rpc.WatchTaskArg")
	proto.RegisterType((*Watch)(nil), "rpc.Watch")
	proto.RegisterType((*Metric)(nil), "rpc.Metric")
	proto.RegisterType((*Label)(nil), "rpc.Label")
	proto.RegisterType((*Task)(nil), "rpc.Task")
	proto.RegisterType((*SnapError)(nil), "rpc.SnapError")
	proto.RegisterType((*Time)(nil), "rpc.Time")
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
	proto.RegisterEnum("rpc.Watch_EventType", Watch_EventType_name, Watch_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for TaskManager service

type TaskManagerClient interface {
	CreateTask(ctx context.Context, in *CreateTaskArg, opts ...grpc.CallOption) (*CreateTaskReply, error)
	GetTask(ctx context.Context, in *GetTaskArg, opts ...grpc.CallOption) (*Task, error)
	GetTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTasksReply, error)
	StartTask(ctx context.Context, in *StartTaskArg, opts ...grpc.CallOption) (*StartTaskReply, error)
	StopTask(ctx context.Context, in *StopTaskArg, opts ...grpc.CallOption) (*StopTaskReply, error)
	RemoveTask(ctx context.Context, in *RemoveTaskArg, opts ...grpc.CallOption) (*Empty, error)
	EnableTask(ctx context.Context, in *EnableTaskArg, opts ...grpc.CallOption) (*Task, error)
	WatchTask(ctx context.Context, in *WatchTaskArg, opts ...grpc.CallOption) (TaskManager_WatchTaskClient, error)
}

type taskManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagerClient(cc *grpc.ClientConn) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) CreateTask(ctx context.Context, in *CreateTaskArg, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetTask(ctx context.Context, in *GetTaskArg, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/GetTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) GetTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTasksReply, error) {
	out := new(GetTasksReply)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/GetTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) StartTask(ctx context.Context, in *StartTaskArg, opts ...grpc.CallOption) (*StartTaskReply, error) {
	out := new(StartTaskReply)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/StartTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) StopTask(ctx context.Context, in *StopTaskArg, opts ...grpc.CallOption) (*StopTaskReply, error) {
	out := new(StopTaskReply)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/StopTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) RemoveTask(ctx context.Context, in *RemoveTaskArg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/RemoveTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) EnableTask(ctx context.Context, in *EnableTaskArg, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/rpc.TaskManager/EnableTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) WatchTask(ctx context.Context, in *WatchTaskArg, opts ...grpc.CallOption) (TaskManager_WatchTaskClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskManager_serviceDesc.Streams[0], c.cc, "/rpc.TaskManager/WatchTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerWatchTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManager_WatchTaskClient interface {
	Recv() (*Watch, error)
	grpc.ClientStream
}

type taskManagerWatchTaskClient struct {
	grpc.ClientStream
}

func (x *taskManagerWatchTaskClient) Recv() (*Watch, error) {
	m := new(Watch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TaskManager service

type TaskManagerServer interface {
	CreateTask(context.Context, *CreateTaskArg) (*CreateTaskReply, error)
	GetTask(context.Context, *GetTaskArg) (*Task, error)
	GetTasks(context.Context, *Empty) (*GetTasksReply, error)
	StartTask(context.Context, *StartTaskArg) (*StartTaskReply, error)
	StopTask(context.Context, *StopTaskArg) (*StopTaskReply, error)
	RemoveTask(context.Context, *RemoveTaskArg) (*Empty, error)
	EnableTask(context.Context, *EnableTaskArg) (*Task, error)
	WatchTask(*WatchTaskArg, TaskManager_WatchTaskServer) error
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateTaskArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).CreateTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetTaskArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).GetTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).GetTasks(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StartTaskArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).StartTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StopTaskArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).StopTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_RemoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RemoveTaskArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).RemoveTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_EnableTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EnableTaskArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TaskManagerServer).EnableTask(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _TaskManager_WatchTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTaskArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagerServer).WatchTask(m, &taskManagerWatchTaskServer{stream})
}

type TaskManager_WatchTaskServer interface {
	Send(*Watch) error
	grpc.ServerStream
}

type taskManagerWatchTaskServer struct {
	grpc.ServerStream
}

func (x *taskManagerWatchTaskServer) Send(m *Watch) error {
	return x.ServerStream.SendMsg(m)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskManager_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskManager_GetTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskManager_GetTasks_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _TaskManager_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _TaskManager_StopTask_Handler,
		},
		{
			MethodName: "RemoveTask",
			Handler:    _TaskManager_RemoveTask_Handler,
		},
		{
			MethodName: "EnableTask",
			Handler:    _TaskManager_EnableTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTask",
			Handler:       _TaskManager_WatchTask_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x25, 0x4a, 0x16, 0x47, 0x92, 0x23, 0x6f, 0x9c, 0x56, 0x50, 0xe3, 0x3a, 0x65, 0x81,
	0xfe, 0x00, 0x8e, 0xd2, 0x3a, 0x28, 0x62, 0xf4, 0x50, 0xc0, 0x71, 0xe8, 0xc2, 0xad, 0x1d, 0x19,
	0x2b, 0x01, 0xed, 0x4d, 0xa0, 0xc5, 0x8d, 0xcd, 0x86, 0xa2, 0x08, 0xee, 0xca, 0xad, 0x7a, 0xee,
	0xa5, 0xb7, 0x1e, 0xfb, 0x1c, 0x3d, 0xf6, 0x81, 0xfa, 0x0a, 0xbd, 0x76, 0x76, 0x96, 0x14, 0x45,
	0x25, 0x2a, 0x90, 0x8b, 0xbd, 0xf3, 0xcd, 0xc7, 0xd9, 0xd9, 0xd9, 0x9d, 0xf9, 0x04, 0xfb, 0x72,
	0x72, 0x2b, 0x82, 0x79, 0x24, 0xd2, 0x27, 0x69, 0x32, 0x79, 0xb2, 0xb4, 0xfa, 0x49, 0x3a, 0x53,
	0x33, 0x56, 0x45, 0xd0, 0xfd, 0xc3, 0x82, 0xf6, 0x69, 0x2a, 0x7c, 0x25, 0x46, 0xbe, 0x7c, 0x7d,
	0x92, 0xde, 0xb0, 0x8f, 0xa1, 0x9d, 0x33, 0xc7, 0x3f, 0xc9, 0x59, 0xdc, 0xb5, 0x1e, 0x59, 0x9f,
	0xb5, 0x78, 0x2b, 0x07, 0xbf, 0x43, 0x8c, 0x7d, 0x00, 0xce, 0xcf, 0x53, 0x3f, 0x31, 0x84, 0x0a,
	0x11, 0x1a, 0x1a, 0x20, 0xe7, 0x1e, 0xd4, 0xa4, 0xf2, 0x53, 0xd5, 0xad, 0xa2, 0xa3, 0xc1, 0x8d,
	0xc1, 0x3e, 0x05, 0x7b, 0x96, 0x28, 0xd9, 0xb5, 0x11, 0x6c, 0x1e, 0xdd, 0xef, 0xe3, 0xee, 0xfd,
	0x62, 0xe7, 0x01, 0xba, 0x38, 0x11, 0xdc, 0xdf, 0x2c, 0xd8, 0x29, 0x3b, 0xf4, 0x76, 0x0a, 0xd7,
	0xe3, 0xd8, 0x9f, 0x0a, 0xca, 0xc7, 0xe1, 0x0d, 0x0d, 0xbc, 0x44, 0x9b, 0xf5, 0xa0, 0x11, 0x08,
	0x3f, 0x88, 0xc2, 0x58, 0x50, 0x2a, 0xe8, 0xcb, 0x6d, 0xf6, 0x08, 0x5a, 0x52, 0xcd, 0x92, 0xf1,
	0x2c, 0x1e, 0xbf, 0xf2, 0xc3, 0x88, 0x32, 0xb2, 0x39, 0x68, 0x6c, 0x10, 0x9f, 0x21, 0xc2, 0xde,
	0x87, 0x6d, 0x0a, 0x1d, 0x06, 0x94, 0x99, 0xc3, 0xeb, 0xda, 0x3c, 0x0f, 0xdc, 0x1f, 0xe1, 0x5e,
	0x91, 0x05, 0x17, 0x49, 0xb4, 0x60, 0xfb, 0x60, 0x6b, 0x27, 0x65, 0xd0, 0x3c, 0x72, 0xe8, 0x08,
	0xe4, 0x25, 0x98, 0x7d, 0x02, 0x75, 0x91, 0xa6, 0xb3, 0x54, 0x62, 0x1a, 0x55, 0x24, 0xec, 0x10,
	0x61, 0x18, 0xfb, 0x89, 0xa7, 0x61, 0x9e, 0x79, 0xdd, 0x87, 0x00, 0xdf, 0x0a, 0x95, 0xd7, 0x7b,
	0x07, 0x2a, 0xb8, 0xb7, 0x39, 0x14, 0xae, 0xdc, 0xdf, 0xf1, 0x46, 0x32, 0xb7, 0x34, 0xdb, 0x3e,
	0x85, 0x1a, 0x59, 0x48, 0xd2, 0x61, 0xf7, 0x29, 0x6c, 0x89, 0x42, 0x59, 0x48, 0x2f, 0x56, 0xe9,
	0x82, 0xd7, 0x74, 0x2e, 0xb2, 0x77, 0x0a, 0x50, 0x80, 0xac, 0x03, 0xd5, 0xd7, 0x62, 0x91, 0xed,
	0xa2, 0x97, 0xec, 0x00, 0x6a, 0x77, 0x7e, 0x34, 0x37, 0x25, 0x2b, 0x1d, 0xc6, 0xe0, 0x5f, 0x57,
	0x8e, 0x2d, 0xf7, 0x43, 0x68, 0x0d, 0xf5, 0xe5, 0x6d, 0xca, 0xf5, 0x18, 0x76, 0x96, 0x7e, 0x93,
	0x6b, 0x51, 0x03, 0xeb, 0x7f, 0x6b, 0xb0, 0x0f, 0xcd, 0x21, 0x5e, 0xc2, 0xa6, 0xc0, 0xcf, 0xa0,
	0x9d, 0xbb, 0xdf, 0x2d, 0xee, 0x01, 0xb4, 0xb9, 0x98, 0xce, 0xee, 0xc4, 0xa6, 0xc8, 0x48, 0xf0,
	0x62, 0xff, 0x3a, 0xda, 0x48, 0xc0, 0x33, 0xff, 0xe0, 0xab, 0xc9, 0xed, 0x26, 0xff, 0xbf, 0x16,
	0xd4, 0x88, 0x80, 0xf7, 0x02, 0xe2, 0x4e, 0xc4, 0x6a, 0xac, 0x16, 0x89, 0x79, 0x96, 0x3b, 0x47,
	0x7b, 0x94, 0x17, 0xf9, 0xfb, 0x9e, 0x76, 0x8e, 0xd0, 0xc7, 0x1d, 0x91, 0x2f, 0x59, 0x17, 0xb6,
	0xa7, 0x42, 0x4a, 0xff, 0x26, 0x7f, 0xac, 0xb9, 0x89, 0x8d, 0x57, 0x27, 0x9a, 0xc4, 0x57, 0xaa,
	0x8f, 0xd8, 0xa4, 0x50, 0x97, 0x42, 0xa5, 0xe1, 0x84, 0x67, 0x2e, 0xf7, 0x57, 0x70, 0x96, 0x61,
	0xd9, 0x03, 0xd8, 0xbd, 0xf4, 0x46, 0xfc, 0xfc, 0x74, 0x38, 0x3e, 0x1d, 0x5c, 0x5c, 0x78, 0xa7,
	0x23, 0xef, 0x45, 0x67, 0x0b, 0x2f, 0xbb, 0x35, 0x3a, 0x19, 0x7e, 0x3f, 0x1e, 0x8e, 0x4e, 0xb8,
	0x46, 0xac, 0x15, 0x64, 0x70, 0x75, 0x85, 0x48, 0x85, 0xed, 0x42, 0x9b, 0x90, 0x17, 0xe7, 0xc3,
	0x93, 0xe7, 0x17, 0x08, 0x55, 0xb1, 0x6d, 0x3b, 0x19, 0x89, 0x7b, 0x27, 0x97, 0xe3, 0xc1, 0x95,
	0xf7, 0xb2, 0x63, 0x33, 0x07, 0x6a, 0x1e, 0xe7, 0x03, 0xde, 0xa9, 0xb9, 0x7f, 0x57, 0xa0, 0x6e,
	0xd2, 0x61, 0x0f, 0xc1, 0xd1, 0xbd, 0x28, 0x13, 0x7f, 0x22, 0xe8, 0x46, 0x1c, 0x5e, 0x00, 0x8c,
	0x81, 0x1d, 0xf8, 0xca, 0xcf, 0x06, 0x03, 0xad, 0x75, 0x0b, 0xeb, 0xff, 0xa6, 0x56, 0xd5, 0xac,
	0x4d, 0x11, 0xc8, 0x8b, 0x72, 0x27, 0x52, 0x19, 0xe2, 0x30, 0xb1, 0xa9, 0x43, 0x73, 0x93, 0xbd,
	0x07, 0x75, 0x39, 0x9b, 0xa7, 0xb8, 0x4b, 0xcd, 0x74, 0xa7, 0xb1, 0x98, 0x0b, 0xf5, 0xc8, 0xbf,
	0x16, 0x91, 0xec, 0xd6, 0xa9, 0x58, 0x40, 0xc5, 0xba, 0xd0, 0x10, 0xcf, 0x3c, 0xec, 0x73, 0xdd,
	0xae, 0x37, 0xb2, 0xbb, 0x4d, 0x8c, 0x07, 0x2b, 0xe5, 0xc4, 0x87, 0x7e, 0x93, 0xb5, 0x0b, 0x51,
	0x70, 0x38, 0x39, 0xa3, 0x10, 0xd3, 0x57, 0xfe, 0x34, 0xe9, 0x36, 0x56, 0x3b, 0x02, 0x51, 0xee,
	0xa8, 0xdc, 0xd7, 0x7b, 0x86, 0xc4, 0xfc, 0xdb, 0xb7, 0x74, 0xd5, 0xde, 0x6a, 0x57, 0x39, 0xab,
	0xad, 0xf4, 0x25, 0xd4, 0x28, 0x3b, 0x4d, 0x09, 0xe3, 0x40, 0xfc, 0x42, 0x9f, 0xd9, 0xdc, 0x18,
	0xba, 0x64, 0x34, 0xdc, 0xcc, 0x77, 0xb4, 0x76, 0xff, 0xa9, 0x80, 0xad, 0x5f, 0xe1, 0xfa, 0x13,
	0xc4, 0x39, 0x04, 0x34, 0xb3, 0x30, 0x25, 0x65, 0x3e, 0xb1, 0x39, 0x0d, 0xc8, 0xa1, 0x06, 0x96,
	0xb1, 0xaa, 0x45, 0x2c, 0x9d, 0xea, 0x6d, 0xa8, 0xb2, 0xea, 0xea, 0xa5, 0xae, 0xec, 0x34, 0x94,
	0x52, 0x48, 0xaa, 0xac, 0xcd, 0x33, 0x4b, 0xe3, 0x7a, 0x54, 0x8a, 0x00, 0x2b, 0x4b, 0xb8, 0xb1,
	0xd8, 0x47, 0xd0, 0x8a, 0x7c, 0xa9, 0x68, 0x8e, 0xce, 0x53, 0x81, 0x55, 0xd5, 0xd1, 0x9b, 0x1a,
	0x3b, 0x33, 0x10, 0x7b, 0x0c, 0x6d, 0x5d, 0xa9, 0x31, 0xf1, 0xd2, 0x79, 0xfc, 0x66, 0x25, 0x9b,
	0xda, 0x7f, 0x81, 0x6e, 0x3e, 0x8f, 0xd9, 0x21, 0xb4, 0x88, 0x3e, 0xa1, 0x31, 0x1b, 0x74, 0x9d,
	0xb7, 0xb2, 0xcd, 0x10, 0x0e, 0x4a, 0x63, 0x1e, 0xd6, 0xc6, 0x7c, 0x49, 0x8e, 0x9a, 0x6b, 0x72,
	0xb4, 0xae, 0x01, 0xad, 0x75, 0x0d, 0x70, 0xff, 0xb2, 0xc0, 0x59, 0x8e, 0x12, 0x7d, 0x50, 0x1a,
	0x26, 0x58, 0xde, 0x34, 0x8c, 0x6f, 0xb2, 0xba, 0x37, 0x09, 0x1b, 0x12, 0xc4, 0x9e, 0xe7, 0x94,
	0x57, 0xa1, 0x88, 0x82, 0x7c, 0xde, 0x1f, 0x94, 0x67, 0x52, 0x9f, 0xfe, 0x9e, 0x11, 0xc3, 0xbc,
	0x35, 0x13, 0xc3, 0x20, 0xbd, 0x6f, 0xa0, 0xb3, 0x4e, 0x78, 0xa7, 0x07, 0x75, 0x88, 0x8f, 0x23,
	0x34, 0x37, 0x2b, 0xc5, 0x84, 0xbe, 0xa9, 0x72, 0xbd, 0xa4, 0xfb, 0xd7, 0x50, 0x85, 0x20, 0x5a,
	0xbb, 0xdb, 0xd8, 0xc6, 0xd3, 0x44, 0x2d, 0x8e, 0xfe, 0xac, 0x42, 0x53, 0x3f, 0xaa, 0x4b, 0x3f,
	0xc6, 0xa1, 0x93, 0xb2, 0x63, 0x80, 0x42, 0xe6, 0x18, 0x5b, 0x93, 0x65, 0x1c, 0x80, 0xbd, 0xbd,
	0x35, 0x8c, 0x06, 0xb2, 0xbb, 0x85, 0x3d, 0xb3, 0x9d, 0x89, 0x10, 0xbb, 0xb7, 0x2a, 0x49, 0xfa,
	0x9b, 0x42, 0x4e, 0x90, 0x78, 0x08, 0x8d, 0x5c, 0xad, 0x98, 0xe9, 0x53, 0x4a, 0xa5, 0xc7, 0xde,
	0x14, 0x32, 0x64, 0x7f, 0x85, 0x77, 0x91, 0x6b, 0x0a, 0xdb, 0x35, 0x25, 0x5d, 0xd1, 0xa0, 0xde,
	0xfd, 0x32, 0x94, 0x7f, 0x76, 0x04, 0x8d, 0x5c, 0x31, 0x58, 0x27, 0xa3, 0x2c, 0xf5, 0x25, 0xdb,
	0xaa, 0x24, 0x29, 0xf8, 0x4d, 0x1f, 0xa0, 0x10, 0x8b, 0xec, 0xec, 0x25, 0xf5, 0xe8, 0xad, 0xa4,
	0x8b, 0xfc, 0xc7, 0x00, 0x85, 0x76, 0x64, 0xfc, 0x92, 0x98, 0x94, 0xcf, 0xdd, 0x07, 0x67, 0xa9,
	0x24, 0xd9, 0x49, 0x56, 0x95, 0x25, 0x0b, 0x4e, 0x90, 0xbb, 0xf5, 0x85, 0x75, 0x5d, 0xa7, 0xdf,
	0x65, 0x4f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xc6, 0x0b, 0xec, 0xb8, 0x09, 0x00, 0x00,
}
