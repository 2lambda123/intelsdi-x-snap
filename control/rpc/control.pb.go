/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go.
// source: control.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	control.proto

It has these top-level messages:
	AvailablePluginReply
	AvailablePluginsReply
	PluginReply
	PluginCatalogReply
	MetricReply
	MetricCatalogReply
	GetPluginRequest
	GetPluginReply
	PluginRequest
	EmptyRequest
	FetchMetricsRequest
	GetMetricVersionsRequest
	UnloadPluginRequest
	Time
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type AvailablePluginReply struct {
	Name             string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version          int64  `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	TypeName         string `protobuf:"bytes,3,opt,name=TypeName" json:"TypeName,omitempty"`
	IsSigned         bool   `protobuf:"varint,4,opt,name=IsSigned" json:"IsSigned,omitempty"`
	HitCount         int64  `protobuf:"varint,5,opt,name=HitCount" json:"HitCount,omitempty"`
	ID               uint32 `protobuf:"varint,6,opt,name=ID" json:"ID,omitempty"`
	LastHitTimestamp *Time  `protobuf:"bytes,7,opt,name=LastHitTimestamp" json:"LastHitTimestamp,omitempty"`
}

func (m *AvailablePluginReply) Reset()                    { *m = AvailablePluginReply{} }
func (m *AvailablePluginReply) String() string            { return proto.CompactTextString(m) }
func (*AvailablePluginReply) ProtoMessage()               {}
func (*AvailablePluginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AvailablePluginReply) GetLastHitTimestamp() *Time {
	if m != nil {
		return m.LastHitTimestamp
	}
	return nil
}

type AvailablePluginsReply struct {
	Plugins []*AvailablePluginReply `protobuf:"bytes,1,rep,name=Plugins" json:"Plugins,omitempty"`
}

func (m *AvailablePluginsReply) Reset()                    { *m = AvailablePluginsReply{} }
func (m *AvailablePluginsReply) String() string            { return proto.CompactTextString(m) }
func (*AvailablePluginsReply) ProtoMessage()               {}
func (*AvailablePluginsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AvailablePluginsReply) GetPlugins() []*AvailablePluginReply {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type PluginReply struct {
	Name            string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version         int64  `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	TypeName        string `protobuf:"bytes,3,opt,name=TypeName" json:"TypeName,omitempty"`
	IsSigned        bool   `protobuf:"varint,4,opt,name=IsSigned" json:"IsSigned,omitempty"`
	Status          string `protobuf:"bytes,5,opt,name=Status" json:"Status,omitempty"`
	LoadedTimestamp *Time  `protobuf:"bytes,6,opt,name=LoadedTimestamp" json:"LoadedTimestamp,omitempty"`
	ConfigPolicy    []byte `protobuf:"bytes,7,opt,name=ConfigPolicy,proto3" json:"ConfigPolicy,omitempty"`
}

func (m *PluginReply) Reset()                    { *m = PluginReply{} }
func (m *PluginReply) String() string            { return proto.CompactTextString(m) }
func (*PluginReply) ProtoMessage()               {}
func (*PluginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PluginReply) GetLoadedTimestamp() *Time {
	if m != nil {
		return m.LoadedTimestamp
	}
	return nil
}

type PluginCatalogReply struct {
	Plugins []*PluginReply `protobuf:"bytes,1,rep,name=Plugins" json:"Plugins,omitempty"`
}

func (m *PluginCatalogReply) Reset()                    { *m = PluginCatalogReply{} }
func (m *PluginCatalogReply) String() string            { return proto.CompactTextString(m) }
func (*PluginCatalogReply) ProtoMessage()               {}
func (*PluginCatalogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PluginCatalogReply) GetPlugins() []*PluginReply {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type MetricReply struct {
	Namespace          []string `protobuf:"bytes,1,rep,name=Namespace" json:"Namespace,omitempty"`
	Version            int64    `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	LastAdvertisedTime *Time    `protobuf:"bytes,3,opt,name=LastAdvertisedTime" json:"LastAdvertisedTime,omitempty"`
	ConfigPolicy       []byte   `protobuf:"bytes,4,opt,name=ConfigPolicy,proto3" json:"ConfigPolicy,omitempty"`
}

func (m *MetricReply) Reset()                    { *m = MetricReply{} }
func (m *MetricReply) String() string            { return proto.CompactTextString(m) }
func (*MetricReply) ProtoMessage()               {}
func (*MetricReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MetricReply) GetLastAdvertisedTime() *Time {
	if m != nil {
		return m.LastAdvertisedTime
	}
	return nil
}

type MetricCatalogReply struct {
	Metrics []*MetricReply `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
}

func (m *MetricCatalogReply) Reset()                    { *m = MetricCatalogReply{} }
func (m *MetricCatalogReply) String() string            { return proto.CompactTextString(m) }
func (*MetricCatalogReply) ProtoMessage()               {}
func (*MetricCatalogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MetricCatalogReply) GetMetrics() []*MetricReply {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type GetPluginRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version  int32  `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=Type" json:"Type,omitempty"`
	Download bool   `protobuf:"varint,4,opt,name=Download" json:"Download,omitempty"`
}

func (m *GetPluginRequest) Reset()                    { *m = GetPluginRequest{} }
func (m *GetPluginRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPluginRequest) ProtoMessage()               {}
func (*GetPluginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetPluginReply struct {
	Plugin      *PluginReply `protobuf:"bytes,1,opt,name=Plugin" json:"Plugin,omitempty"`
	PluginBytes []byte       `protobuf:"bytes,2,opt,name=PluginBytes,proto3" json:"PluginBytes,omitempty"`
}

func (m *GetPluginReply) Reset()                    { *m = GetPluginReply{} }
func (m *GetPluginReply) String() string            { return proto.CompactTextString(m) }
func (*GetPluginReply) ProtoMessage()               {}
func (*GetPluginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetPluginReply) GetPlugin() *PluginReply {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type PluginRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	CheckSum   []byte `protobuf:"bytes,2,opt,name=CheckSum,proto3" json:"CheckSum,omitempty"`
	Signature  []byte `protobuf:"bytes,3,opt,name=Signature,proto3" json:"Signature,omitempty"`
	PluginFile []byte `protobuf:"bytes,4,opt,name=PluginFile,proto3" json:"PluginFile,omitempty"`
}

func (m *PluginRequest) Reset()                    { *m = PluginRequest{} }
func (m *PluginRequest) String() string            { return proto.CompactTextString(m) }
func (*PluginRequest) ProtoMessage()               {}
func (*PluginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type FetchMetricsRequest struct {
	Namespace []string `protobuf:"bytes,1,rep,name=Namespace" json:"Namespace,omitempty"`
	Version   int32    `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
}

func (m *FetchMetricsRequest) Reset()                    { *m = FetchMetricsRequest{} }
func (m *FetchMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchMetricsRequest) ProtoMessage()               {}
func (*FetchMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetMetricVersionsRequest struct {
	Namespace []string `protobuf:"bytes,1,rep,name=Namespace" json:"Namespace,omitempty"`
}

func (m *GetMetricVersionsRequest) Reset()                    { *m = GetMetricVersionsRequest{} }
func (m *GetMetricVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMetricVersionsRequest) ProtoMessage()               {}
func (*GetMetricVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type UnloadPluginRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version    int32  `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
	PluginType string `protobuf:"bytes,3,opt,name=PluginType" json:"PluginType,omitempty"`
}

func (m *UnloadPluginRequest) Reset()                    { *m = UnloadPluginRequest{} }
func (m *UnloadPluginRequest) String() string            { return proto.CompactTextString(m) }
func (*UnloadPluginRequest) ProtoMessage()               {}
func (*UnloadPluginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Time struct {
	Sec  int64 `protobuf:"varint,1,opt,name=Sec" json:"Sec,omitempty"`
	Nsec int64 `protobuf:"varint,2,opt,name=Nsec" json:"Nsec,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*AvailablePluginReply)(nil), "rpc.AvailablePluginReply")
	proto.RegisterType((*AvailablePluginsReply)(nil), "rpc.AvailablePluginsReply")
	proto.RegisterType((*PluginReply)(nil), "rpc.PluginReply")
	proto.RegisterType((*PluginCatalogReply)(nil), "rpc.PluginCatalogReply")
	proto.RegisterType((*MetricReply)(nil), "rpc.MetricReply")
	proto.RegisterType((*MetricCatalogReply)(nil), "rpc.MetricCatalogReply")
	proto.RegisterType((*GetPluginRequest)(nil), "rpc.GetPluginRequest")
	proto.RegisterType((*GetPluginReply)(nil), "rpc.GetPluginReply")
	proto.RegisterType((*PluginRequest)(nil), "rpc.PluginRequest")
	proto.RegisterType((*EmptyRequest)(nil), "rpc.EmptyRequest")
	proto.RegisterType((*FetchMetricsRequest)(nil), "rpc.FetchMetricsRequest")
	proto.RegisterType((*GetMetricVersionsRequest)(nil), "rpc.GetMetricVersionsRequest")
	proto.RegisterType((*UnloadPluginRequest)(nil), "rpc.UnloadPluginRequest")
	proto.RegisterType((*Time)(nil), "rpc.Time")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for MetricManager service

type MetricManagerClient interface {
	Load(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginReply, error)
	MetricCatalog(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MetricCatalogReply, error)
	FetchMetrics(ctx context.Context, in *FetchMetricsRequest, opts ...grpc.CallOption) (*MetricCatalogReply, error)
	GetMetricVersions(ctx context.Context, in *GetMetricVersionsRequest, opts ...grpc.CallOption) (*MetricCatalogReply, error)
	GetMetric(ctx context.Context, in *FetchMetricsRequest, opts ...grpc.CallOption) (*MetricReply, error)
	Unload(ctx context.Context, in *UnloadPluginRequest, opts ...grpc.CallOption) (*PluginReply, error)
	PluginCatalog(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PluginCatalogReply, error)
	AvailablePlugins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AvailablePluginsReply, error)
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginReply, error)
}

type metricManagerClient struct {
	cc *grpc.ClientConn
}

func NewMetricManagerClient(cc *grpc.ClientConn) MetricManagerClient {
	return &metricManagerClient{cc}
}

func (c *metricManagerClient) Load(ctx context.Context, in *PluginRequest, opts ...grpc.CallOption) (*PluginReply, error) {
	out := new(PluginReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/Load", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) MetricCatalog(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MetricCatalogReply, error) {
	out := new(MetricCatalogReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/MetricCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) FetchMetrics(ctx context.Context, in *FetchMetricsRequest, opts ...grpc.CallOption) (*MetricCatalogReply, error) {
	out := new(MetricCatalogReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/FetchMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) GetMetricVersions(ctx context.Context, in *GetMetricVersionsRequest, opts ...grpc.CallOption) (*MetricCatalogReply, error) {
	out := new(MetricCatalogReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/GetMetricVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) GetMetric(ctx context.Context, in *FetchMetricsRequest, opts ...grpc.CallOption) (*MetricReply, error) {
	out := new(MetricReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/GetMetric", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) Unload(ctx context.Context, in *UnloadPluginRequest, opts ...grpc.CallOption) (*PluginReply, error) {
	out := new(PluginReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/Unload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) PluginCatalog(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PluginCatalogReply, error) {
	out := new(PluginCatalogReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/PluginCatalog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) AvailablePlugins(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AvailablePluginsReply, error) {
	out := new(AvailablePluginsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/AvailablePlugins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginReply, error) {
	out := new(GetPluginReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/GetPlugin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricManager service

type MetricManagerServer interface {
	Load(context.Context, *PluginRequest) (*PluginReply, error)
	MetricCatalog(context.Context, *EmptyRequest) (*MetricCatalogReply, error)
	FetchMetrics(context.Context, *FetchMetricsRequest) (*MetricCatalogReply, error)
	GetMetricVersions(context.Context, *GetMetricVersionsRequest) (*MetricCatalogReply, error)
	GetMetric(context.Context, *FetchMetricsRequest) (*MetricReply, error)
	Unload(context.Context, *UnloadPluginRequest) (*PluginReply, error)
	PluginCatalog(context.Context, *EmptyRequest) (*PluginCatalogReply, error)
	AvailablePlugins(context.Context, *EmptyRequest) (*AvailablePluginsReply, error)
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginReply, error)
}

func RegisterMetricManagerServer(s *grpc.Server, srv MetricManagerServer) {
	s.RegisterService(&_MetricManager_serviceDesc, srv)
}

func _MetricManager_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).Load(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_MetricCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).MetricCatalog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_FetchMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FetchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).FetchMetrics(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_GetMetricVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetMetricVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).GetMetricVersions(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FetchMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).GetMetric(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_Unload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnloadPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).Unload(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_PluginCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).PluginCatalog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_AvailablePlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).AvailablePlugins(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MetricManager_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MetricManagerServer).GetPlugin(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MetricManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MetricManager",
	HandlerType: (*MetricManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _MetricManager_Load_Handler,
		},
		{
			MethodName: "MetricCatalog",
			Handler:    _MetricManager_MetricCatalog_Handler,
		},
		{
			MethodName: "FetchMetrics",
			Handler:    _MetricManager_FetchMetrics_Handler,
		},
		{
			MethodName: "GetMetricVersions",
			Handler:    _MetricManager_GetMetricVersions_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _MetricManager_GetMetric_Handler,
		},
		{
			MethodName: "Unload",
			Handler:    _MetricManager_Unload_Handler,
		},
		{
			MethodName: "PluginCatalog",
			Handler:    _MetricManager_PluginCatalog_Handler,
		},
		{
			MethodName: "AvailablePlugins",
			Handler:    _MetricManager_AvailablePlugins_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _MetricManager_GetPlugin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0xff, 0xa7, 0x76, 0x9d, 0x78, 0xea, 0xb4, 0xe9, 0xf6, 0x5f, 0x30, 0x11, 0xa0, 0x6a, 0x4f,
	0x15, 0x42, 0x39, 0xb4, 0x02, 0xd1, 0x03, 0x12, 0x25, 0xa5, 0x50, 0xa9, 0x41, 0xd5, 0xa6, 0x70,
	0xe2, 0xe2, 0x3a, 0x4b, 0x6a, 0xe1, 0xd8, 0xc6, 0xde, 0x14, 0xe5, 0xc0, 0xdb, 0xf0, 0x28, 0xbc,
	0x07, 0x17, 0x1e, 0x84, 0xfd, 0x72, 0x63, 0x3b, 0x6e, 0x28, 0x42, 0xe2, 0xd4, 0xcc, 0xec, 0xcc,
	0xec, 0xfc, 0x3e, 0x6c, 0x17, 0xda, 0x7e, 0x1c, 0xb1, 0x34, 0x0e, 0x7b, 0x49, 0x1a, 0xb3, 0x18,
	0x19, 0x69, 0xe2, 0xe3, 0x1f, 0x0d, 0xf8, 0xff, 0xf0, 0xca, 0x0b, 0x42, 0xef, 0x22, 0xa4, 0x67,
	0xe1, 0x74, 0x1c, 0x44, 0x84, 0x26, 0xe1, 0x0c, 0x21, 0x30, 0xdf, 0x7a, 0x13, 0xea, 0x36, 0x76,
	0x1a, 0xbb, 0x36, 0x31, 0x23, 0xfe, 0x1b, 0xb9, 0xd0, 0x7c, 0x4f, 0xd3, 0x2c, 0x88, 0x23, 0x77,
	0x85, 0xa7, 0x0d, 0xd2, 0xbc, 0x52, 0x21, 0xea, 0x42, 0xeb, 0x7c, 0x96, 0x50, 0xd9, 0x61, 0xc8,
	0x8e, 0x16, 0xd3, 0xb1, 0x38, 0x3b, 0xc9, 0x86, 0xc1, 0x38, 0xa2, 0x23, 0xd7, 0xe4, 0x67, 0x2d,
	0xd2, 0x0a, 0x74, 0x2c, 0xce, 0xde, 0x04, 0xac, 0x1f, 0x4f, 0x23, 0xe6, 0xae, 0xca, 0x91, 0xad,
	0x4b, 0x1d, 0xa3, 0x75, 0x58, 0x39, 0x39, 0x72, 0x2d, 0x9e, 0x6d, 0x93, 0x95, 0xe0, 0x08, 0x3d,
	0x81, 0xce, 0xa9, 0x97, 0x31, 0x5e, 0x7f, 0x1e, 0x4c, 0x68, 0xc6, 0xbc, 0x49, 0xe2, 0x36, 0xf9,
	0xe9, 0xda, 0x9e, 0xdd, 0xe3, 0x50, 0x7a, 0x22, 0x4b, 0x3a, 0x61, 0xa5, 0x04, 0x9f, 0xc2, 0x76,
	0x05, 0x60, 0xa6, 0x10, 0xee, 0x43, 0x53, 0xc7, 0x1c, 0xa4, 0xc1, 0xc7, 0xdc, 0x93, 0x63, 0xea,
	0xd8, 0x20, 0xcd, 0x44, 0x55, 0xe2, 0x9f, 0x0d, 0x58, 0xfb, 0xf7, 0x34, 0xdd, 0x01, 0x6b, 0xc8,
	0x3c, 0x36, 0xcd, 0x24, 0x49, 0x36, 0xb1, 0x32, 0x19, 0x71, 0x08, 0x1b, 0xa7, 0xb1, 0x37, 0xa2,
	0xa3, 0x39, 0x23, 0x56, 0x95, 0x91, 0x8d, 0xb0, 0x5c, 0x81, 0x30, 0x38, 0xfd, 0x38, 0xfa, 0x18,
	0x8c, 0xcf, 0xe2, 0x30, 0xf0, 0x67, 0x92, 0x43, 0x87, 0x38, 0x7e, 0x21, 0x87, 0x5f, 0x00, 0x52,
	0x28, 0xfb, 0x1e, 0xf3, 0xc2, 0x78, 0xac, 0xc0, 0x3e, 0xaa, 0x32, 0xd6, 0x91, 0xd7, 0xd4, 0x12,
	0xf5, 0x8d, 0x13, 0x35, 0xa0, 0x2c, 0x0d, 0x7c, 0xd5, 0x7b, 0x1f, 0x6c, 0x01, 0x33, 0x4b, 0x3c,
	0x9f, 0xca, 0x6e, 0x9b, 0xd8, 0x51, 0x9e, 0x58, 0x42, 0xd9, 0x01, 0x20, 0xa1, 0xfa, 0xe1, 0x88,
	0x27, 0x58, 0x90, 0x29, 0x20, 0x92, 0xbc, 0x12, 0x4a, 0x14, 0x2e, 0x14, 0x2d, 0x00, 0x35, 0xeb,
	0x81, 0xaa, 0x2d, 0xab, 0x40, 0x55, 0xb6, 0x0c, 0xb4, 0x80, 0x87, 0x34, 0x27, 0xaa, 0x00, 0x27,
	0xd0, 0x79, 0x4d, 0x59, 0xce, 0xc1, 0xe7, 0x29, 0x67, 0xf9, 0x36, 0xae, 0x58, 0x9d, 0x43, 0xe4,
	0xd5, 0xc2, 0x15, 0xda, 0x11, 0xa6, 0x70, 0x84, 0x70, 0xc3, 0x51, 0xfc, 0x25, 0x12, 0xda, 0xe5,
	0x6e, 0x18, 0xe9, 0x18, 0x7f, 0x80, 0xf5, 0xc2, 0x8d, 0x62, 0xdf, 0x5d, 0xb0, 0x54, 0x28, 0x6f,
	0xac, 0xd3, 0xc5, 0x52, 0xba, 0xa0, 0x9d, 0xdc, 0xbe, 0x2f, 0x67, 0x8c, 0x66, 0x72, 0x13, 0x87,
	0xac, 0x25, 0xf3, 0x14, 0xfe, 0x0a, 0xed, 0xdf, 0x83, 0xe1, 0xeb, 0xf5, 0x2f, 0xa9, 0xff, 0x69,
	0x38, 0x9d, 0xe8, 0x19, 0x2d, 0x5f, 0xc7, 0x42, 0x69, 0x61, 0x5b, 0x6e, 0xd0, 0x54, 0x61, 0x72,
	0x88, 0x9d, 0xe5, 0x09, 0xf4, 0x10, 0x40, 0x8d, 0x3f, 0x0e, 0x42, 0xaa, 0x25, 0x81, 0xe4, 0x3a,
	0x83, 0xd7, 0xc1, 0x79, 0x35, 0x49, 0xd8, 0x4c, 0xdf, 0x8e, 0x07, 0xb0, 0x75, 0x4c, 0x99, 0x7f,
	0xa9, 0xf5, 0xc8, 0x97, 0xfa, 0x23, 0x3b, 0xcd, 0xb9, 0xc6, 0xcf, 0xc0, 0xe5, 0xdc, 0xa9, 0x61,
	0xba, 0xe4, 0x76, 0x33, 0xb1, 0x0f, 0x5b, 0xef, 0x24, 0xff, 0x7f, 0x23, 0xf5, 0x35, 0xfa, 0x82,
	0xe0, 0x1a, 0xbd, 0xc8, 0xe0, 0xc7, 0xdc, 0x0a, 0xc2, 0xba, 0x1d, 0x30, 0x86, 0xd4, 0x97, 0x43,
	0x0d, 0x62, 0x64, 0xd4, 0x97, 0xf7, 0xf0, 0xbf, 0xfa, 0xf1, 0x30, 0x23, 0xfe, 0x7b, 0xef, 0xbb,
	0x09, 0x6d, 0x05, 0x65, 0xe0, 0x45, 0xde, 0x98, 0xa6, 0xa8, 0x07, 0xa6, 0x78, 0x21, 0x20, 0x54,
	0x32, 0x80, 0xdc, 0xb4, 0xbb, 0x60, 0x0a, 0xfc, 0x1f, 0x7a, 0x9e, 0x0f, 0xd0, 0xf6, 0x47, 0x9b,
	0xb2, 0xa8, 0xa8, 0x40, 0xf7, 0x6e, 0xc1, 0xfb, 0xc5, 0xa7, 0x84, 0xb7, 0xf7, 0xc1, 0x29, 0x8a,
	0x83, 0x5c, 0x59, 0x5a, 0xa3, 0xd7, 0xb2, 0x21, 0x03, 0xd8, 0x5c, 0x90, 0x04, 0x3d, 0x90, 0xf5,
	0x37, 0x49, 0xb5, 0x6c, 0xdc, 0x01, 0xd8, 0xd7, 0x6d, 0x4b, 0x16, 0x5a, 0x78, 0xa2, 0x79, 0xeb,
	0x53, 0xb0, 0x94, 0xc4, 0xba, 0xaf, 0x46, 0xef, 0x9b, 0x58, 0x2c, 0xbd, 0x2d, 0x6f, 0x66, 0x71,
	0xf1, 0xa5, 0x2a, 0x59, 0xec, 0x54, 0xbf, 0x50, 0x75, 0x13, 0xba, 0x75, 0x9f, 0xa7, 0xac, 0x0c,
	0x5b, 0x25, 0xd1, 0x76, 0xce, 0x5e, 0x79, 0xf7, 0xad, 0x6a, 0x5a, 0xb6, 0x5e, 0x58, 0xf2, 0xff,
	0x81, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xf5, 0x89, 0x48, 0x20, 0x08, 0x00, 0x00,
}
